0
00:00:00,000 --> 00:00:03,000
One last bit of housekeeping, then we're done!

1
00:00:03,000 --> 00:00:08,000
What should our hardware do if for some reason an instruction can't be executed?

2
00:00:08,000 --> 00:00:21,000
For example, if a programming error has led to trying to execute some piece of data as an instruction and the opcode field doesn't correspond to a Beta instruction (a so-called "illop" or illegal operation).

3
00:00:21,000 --> 00:00:26,000
Or maybe the memory address is larger than the actual amount main memory.

4
00:00:26,000 --> 00:00:35,000
Or maybe one of the operand values is not acceptable, e.g., if the B operand for a DIV instruction is 0.

5
00:00:35,000 --> 00:00:45,000
In modern computers, the accepted strategy is cease execution of the running program and transfer control to some error handler code.

6
00:00:45,000 --> 00:00:50,000
The error handler might store the program state onto disk for later debugging.

7
00:00:50,000 --> 00:01:01,000
Or, for an unimplemented but legal opcode, it might emulate the missing instruction in software and resume execution as if the instruction had been implemented in hardware!

8
00:01:01,000 --> 00:01:08,000
There's also the need to deal with external events, like those associated with input and output.

9
00:01:08,000 --> 00:01:19,000
Here we'd like to interrupt the execution of the current program, run some code to deal with the external event, then resume execution as if the interrupt had never happened.

10
00:01:19,000 --> 00:01:27,000
To deal with these cases, we'll add hardware to treat exceptions like forced procedure calls to special code to handle the situation,

11
00:01:27,000 --> 00:01:36,000
arranging to save the PC+4 value of the interrupted program so that the handler can resume execution if it wishes.

12
00:01:36,000 --> 00:01:46,000
This is a very powerful feature since it allows us to transfer control to software to handle most any circumstance beyond the capability of our modest hardware.

13
00:01:46,000 --> 00:02:01,000
As we'll see in Part 3 of the course, the exception hardware will be our key to interfacing running programs to the operating system (OS) and to allow the OS to deal with external events without any awareness on the part of the running program.

14
00:02:01,000 --> 00:02:10,000
So our plan is to interrupt the running program, acting like the current instruction was actually a procedure call to the handler code.

15
00:02:10,000 --> 00:02:20,000
When it finishes execution, the handler can, if appropriate, use the normal procedure return sequence to resume execution of the user program.

16
00:02:20,000 --> 00:02:26,000
We'll use the term "exception" to refer to exceptions caused by executing the current program.

17
00:02:26,000 --> 00:02:33,000
Such exceptions are "synchronous" in the sense that they are triggered by executing a particular instruction.

18
00:02:33,000 --> 00:02:39,000
In other words, if the program was re-run with the same data, the same exception would occur.

19
00:02:39,000 --> 00:02:49,000
We'll use the term "interrupt" to refer to asynchronous exceptions resulting from external events whose timing is unrelated to the currently running program.

20
00:02:49,000 --> 00:02:53,000
The implementation for both types of exceptions is the same.

21
00:02:53,000 --> 00:03:07,000
When an exception is detected, the Beta hardware will behave as if the current instruction was a taken BR to either location 0x4 (for synchronous exceptions) or location 0x8 (for asynchronous interrupts).

22
00:03:07,000 --> 00:03:14,000
Presumably the instructions in those locations will jump to the entry points of the appropriate handler routines.

23
00:03:14,000 --> 00:03:23,000
We'll save the PC+4 value of the interrupted program into R30, a register dedicated to that purpose.

24
00:03:23,000 --> 00:03:30,000
We'll call that register XP ("exception pointer") to remind ourselves of how we're using it.

25
00:03:30,000 --> 00:03:46,000
Since interrupts in particular can happen at any point during a program's execution, thus overwriting the contents of XP at any time, user programs can't use the XP register to hold values since those values might disappear at any moment!

26
00:03:46,000 --> 00:03:49,000
Here's how this scheme works:

27
00:03:49,000 --> 00:03:55,000
suppose we don't include hardware to implement the DIV instruction, so it's treated as an illegal opcode.

28
00:03:55,000 --> 00:04:04,000
The exception hardware forces a procedure call to location 0x4, which then branches to the Illop handler shown here.

29
00:04:04,000 --> 00:04:17,000
The PC+4 value of the DIV instruction has been saved in the XP register, so the handler can fetch the illegal instruction and, if it can, emulate its operation in software.

30
00:04:17,000 --> 00:04:27,000
When handler is complete, it can resume execution of the original program at the instruction following DIV by performing a JMP(XP).

31
00:04:27,000 --> 00:04:29,000
Pretty neat!

32
00:04:29,000 --> 00:04:33,000
To handle exceptions, we only need a few simple changes to the datapath.

33
00:04:33,000 --> 00:04:40,000
We've added a MUX controlled by the WASEL signal to choose the write-back address for the register file.

34
00:04:40,000 --> 00:04:47,000
When WASEL is 1, write-back will occur to the XP register, i.e., register 30.

35
00:04:47,000 --> 00:04:57,000
When WASEL is 0, write-back will occur normally, i.e., to the register specified by the RC field of the current instruction.

36
00:04:57,000 --> 00:05:04,000
The remaining two inputs of the PCSEL MUX are set to the constant addresses for the exception handlers.

37
00:05:04,000 --> 00:05:09,000
In our case, 0x4 for illegal operations, and 0x8 for interrupts.

38
00:05:09,000 --> 00:05:13,000
Here's the flow of control during an exception.

39
00:05:13,000 --> 00:05:21,000
The PC+4 value for the interrupted instruction is routed through the WDSEL MUX to be written into the XP register.

40
00:05:21,000 --> 00:05:33,000
Meanwhile the control logic chooses either 3 or 4 as the value of PCSEL to select the appropriate next instruction that will initiate the handling the exception.

41
00:05:33,000 --> 00:05:45,000
The remaining control signals are forced to their "don't care" values, since we no longer care about completing execution of the instruction we had fetched from main memory at the beginning of the cycle.

42
00:05:45,000 --> 00:05:50,000
Note that the interrupted instruction has not been executed.

43
00:05:50,000 --> 00:06:04,000
So if the exception handler wishes to execute the interrupted instruction, it will have to subtract 4 from the value in the XP register before performing a JMP(XP) to resume execution of the interrupted program.

