0
00:00:00,000 --> 00:00:09,000
If we want our system to be modular and expandable, how should its design accommodate components that the user might add at a later time?

1
00:00:09,000 --> 00:00:19,000
For many years the approach was to provide a way to plug additional printed circuit boards into the main "motherboard" that holds the CPU, memory, and the initial collection of I/O components.

2
00:00:19,000 --> 00:00:29,000
The socket on the motherboard connects the circuitry on the add-in card to the signals on the motherboard that allow the CPU to communicate with the add-in card.

3
00:00:29,000 --> 00:00:36,000
These signals include power and a clock signal used to time the communication, along with the following.

4
00:00:36,000 --> 00:00:41,000
* Address wires to select different communication end points on the add-in card.

5
00:00:41,000 --> 00:00:47,000
The end points might include memory locations, control registers, diagnostic ports, etc.

6
00:00:47,000 --> 00:00:51,000
* Data wires for transferring data to and from the CPU.

7
00:00:51,000 --> 00:00:57,000
In older systems, there would many data wires to support byte- or word-width data transfers.

8
00:00:57,000 --> 00:01:07,000
* Some number of control wires that tell the add-in card when a particular transfer has started and that allow the add-in card to indicate when it has responded.

9
00:01:07,000 --> 00:01:20,000
If there are multiple slots for plugging in multiple add-in cards, the same signals might be connected to all the cards and the address wires would be used to sort out which transfers were intended for which cards.

10
00:01:20,000 --> 00:01:24,000
Collectively these signals are referred to as the system bus.

11
00:01:24,000 --> 00:01:33,000
"Bus" is system-architect jargon for a collection of wires used to transfer data using a pre-determined communication protocol.

12
00:01:33,000 --> 00:01:37,000
Here's an example of how a bus transaction might work.

13
00:01:37,000 --> 00:01:48,000
The CLK signal is used to time when signals are placed on the bus wires (at the assertion edge of CLK) and when they're read by the recipient (at the sample edge of the CLK).

14
00:01:48,000 --> 00:01:58,000
The timing of the clock waveform is designed to allow enough time for the signals to propagate down the bus and reach valid logic levels at all the receivers.

15
00:01:58,000 --> 00:02:04,000
The component initiating the transaction is called the bus master who is said to "own" the bus.

16
00:02:04,000 --> 00:02:09,000
Most buses provide a mechanism for transferring ownership from one component to another.

17
00:02:09,000 --> 00:02:23,000
The master sets the bus lines to indicate the desired operation (read, write, block transfer, etc.), the address of the recipient, and, in the case of a write operation, the data to be sent to the recipient.

18
00:02:23,000 --> 00:02:31,000
The intended recipient, called the slave, is watching the bus lines looking for its address at each sample edge.

19
00:02:31,000 --> 00:02:40,000
When it sees a transaction for itself, the slave performs the requested operation, using a bus signal to indicate when the operation is complete.

20
00:02:40,000 --> 00:02:45,000
On completion it may use the data wires to return information to the master.

21
00:02:45,000 --> 00:02:55,000
The bus itself may include circuitry to look for transactions where the slave isn't responding and, after an appropriate interval,

22
00:02:55,000 --> 00:02:59,000
generate an error response so the master can take the appropriate action.

23
00:02:59,000 --> 00:03:10,000
This sort of bus architecture proved to be a very workable design for accommodating add-in cards as long as the rate of transactions wasn't too fast, say less than 50 Mhz.

24
00:03:10,000 --> 00:03:22,000
But as system speeds increased, transaction rates had to increase to keep system performance at acceptable levels, so the time for each transaction got smaller.

25
00:03:22,000 --> 00:03:27,000
With less time for signaling on the bus wires, various effects began loom large.

26
00:03:27,000 --> 00:03:35,000
If the clock had too short a period, there wasn't enough time for the master to see the assertion edge, enable its drivers,

27
00:03:35,000 --> 00:03:43,000
have the signal propagate down a long bus to the intended receiver and be stable at each receiver for long enough before the sample edge.

28
00:03:43,000 --> 00:03:49,000
Another problem was that the clock signal would arrive at different cards at different times.

29
00:03:49,000 --> 00:04:00,000
So a card with an early-arriving clock might decide it was its turn to start driving the bus signals, while a card with a late-arriving clock might still be driving the bus from the previous cycle.

30
00:04:00,000 --> 00:04:06,000
These momentary conflicts between drivers could add huge amounts of electrical noise to the system.

31
00:04:06,000 --> 00:04:14,000
Another big issue is that energy would reflect off all the small impedance discontinuities caused by the bus connectors.

32
00:04:14,000 --> 00:04:21,000
If there were many connectors, there would be many small echoes which would could corrupt the signal seen by various receivers.

33
00:04:21,000 --> 00:04:29,000
The equations in the upper right show how much of the signal energy is transmitted and how much is reflected at each discontinuity.

34
00:04:29,000 --> 00:04:35,000
The net effect was like trying to talk very fast while yelling into the Grand Canyon.

35
00:04:35,000 --> 00:04:43,000
The echoes could distort the message beyond recognition unless sufficient time was allocated between words for the echoes to die away.

36
00:04:43,000 --> 00:04:54,000
Eventually buses were relegated to relatively low-speed communication tasks and a different approach had to be developed for high-speed communication.

