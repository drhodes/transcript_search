0
00:00:00,000 --> 00:00:09,000
Now let's turn our attention to the second class of instructions: load (LD) and store (ST), which allow the CPU to access values in memory.

1
00:00:09,000 --> 00:00:17,000
Note that since the Beta is a load-store architecture these instructions are the *only* mechanism for accessing memory values.

2
00:00:17,000 --> 00:00:23,000
The LD and ST instructions use the same instruction template as the ALU-with-constant instructions.

3
00:00:23,000 --> 00:00:35,000
To access memory, we'll need a memory address, which is computed by adding the value of the "ra" register to the sign-extended 16-bit constant from the low-order 16 bits of the instruction.

4
00:00:35,000 --> 00:00:48,000
This computation is exactly the one performed by the ADDC instruction -- so we'll reuse that hardware -- and the sum is sent to main memory as the byte address of the location to be accessed.

5
00:00:48,000 --> 00:00:53,000
For the LD instruction, the data returned by main memory is written to the "rc" register.

6
00:00:53,000 --> 00:01:03,000
The store instruction (ST) performs the same address calculation as LD, then reads the data value from the "rc" register and sends both to main memory.

7
00:01:03,000 --> 00:01:07,000
The ST instruction is special in several ways:

8
00:01:07,000 --> 00:01:15,000
it's the only instruction that needs to read the value of the "rc" register, so we'll need to adjust the datapath hardware slightly to accommodate that need.

9
00:01:15,000 --> 00:01:26,000
And since "rc" is serving as a source operand, it appears as the first operand in the symbolic form of the instruction, followed by "const" and "ra" which are specifying the destination address.

10
00:01:26,000 --> 00:01:33,000
ST is the only instruction that does *not* write a result into the register file at end of the instruction.

11
00:01:33,000 --> 00:01:45,000
Here's the example we saw earlier, where we needed to load the value of the variable x from memory, multiply it by 37 and write the result back to the memory location that holds the value of the variable y.

12
00:01:45,000 --> 00:01:52,000
Now that we have actual Beta instructions, we've expressed the computation as a sequence of three instructions.

13
00:01:52,000 --> 00:02:04,000
To access the value of variable x, the LD instruction adds the contents of R31 to the constant 0x1008, which sums to 0x1008, the address we need to access.

14
00:02:04,000 --> 00:02:10,000
The ST instruction specifies a similar address calculation to write into the location for the variable y.

15
00:02:10,000 --> 00:02:21,000
The address calculation performed by LD and ST works well when the locations we need to access have addresses that fit into the 16-bit constant field.

16
00:02:21,000 --> 00:02:27,000
What happens when we need to access locations at addresses higher than 0x7FFF?

17
00:02:27,000 --> 00:02:37,000
Then we need to treat those addresses as we would any large constant, and store those large addresses in main memory so they can be loaded into a register to be used by LD and ST.

18
00:02:37,000 --> 00:02:47,000
Okay, but what if the number of large constants we need to store is greater than will fit in low memory, i.e., the addresses we can access directly?

19
00:02:47,000 --> 00:02:55,000
To solve this problem, the Beta includes a "load relative" (LDR) instruction, which we'll see in the lecture on the Beta implementation.

