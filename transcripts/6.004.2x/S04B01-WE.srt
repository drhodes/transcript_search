0
00:00:00,000 --> 00:00:07,000
As presented in lecture, in this course, we use a simple 32-bit processor called the Beta.

1
00:00:07,000 --> 00:00:11,000
The Beta works on 32-bit instruction and data words.

2
00:00:11,000 --> 00:00:15,000
However, the addresses in memory are specified in bytes.

3
00:00:15,000 --> 00:00:22,000
A byte is made up of 8 bits, so each 32-bit instruction consists of 4 bytes.

4
00:00:22,000 --> 00:00:36,000
That means that if you have two instructions A and B in consecutive memory locations, if A is at address 0x100, then B is at address 0x104.

5
00:00:36,000 --> 00:00:41,000
Now, suppose that you are given the following piece of code.

6
00:00:41,000 --> 00:00:47,000
The . = 0 notation tells you that your program begins at address 0.

7
00:00:47,000 --> 00:00:54,000
You can assume that execution begins at this location 0 and halts when the HALT() instruction is about to be executed.

8
00:00:54,000 --> 00:01:01,000
We want to determine what value ends up in R0 after this instruction sequence has been executed.

9
00:01:01,000 --> 00:01:09,000
Note that we are working with hexadecimal numbers in this code and we want our answer to also be in hexadecimal.

10
00:01:09,000 --> 00:01:14,000
This code begins with a LD operation into register R0.

11
00:01:14,000 --> 00:01:21,000
The load, uses the value of R31 + c as the source address for the load.

12
00:01:21,000 --> 00:01:28,000
Since R31 = 0, this means that the value stored at address c is being loaded into R0.

13
00:01:28,000 --> 00:01:34,000
So after the LD, R0 = 0x300.

14
00:01:34,000 --> 00:01:43,000
Next an ADDC of R0 with the constant b is performed and that result is stored back into R0.

15
00:01:43,000 --> 00:01:53,000
The .=0x200 notation immediately preceding the "a" label, tells us that address a = 0x200.

16
00:01:53,000 --> 00:02:01,000
This means that address b = 0x204, and c = 0x208.

17
00:02:01,000 --> 00:02:16,000
So if we are adding the constant b to R0, R0 now becomes 0x300 + 0x204 = 0x504.

18
00:02:16,000 --> 00:02:19,000
Now lets take a look at this short piece of code.

19
00:02:19,000 --> 00:02:25,000
Our goal is to determine the value left in R0 in hexadecimal.

20
00:02:25,000 --> 00:02:33,000
The . = 0 notation once again tells us that our first instruction (the branch) is at address 0.

21
00:02:33,000 --> 00:02:43,000
The branch instruction then branches to location . + 4 = 0 + 4 = 4.

22
00:02:43,000 --> 00:02:46,000
This is the address of the HALT() instruction.

23
00:02:46,000 --> 00:02:59,000
In addition to branching to the HALT() instruction, a branch instruction also stores the address of the instruction immediately following it into the destination register, R0 in this case.

24
00:02:59,000 --> 00:03:07,000
The address of the next instruction is 4, so R0 = 0x4.

25
00:03:07,000 --> 00:03:12,000
Let's take a look at what this code is doing.

26
00:03:12,000 --> 00:03:26,000
It first loads the contents of address x into R0, so R0 = 0x0FACE0FF or 0xFACEOFF for short.

27
00:03:26,000 --> 00:03:32,000
It then moves the constant 0 into R1, so R1 = 0.

28
00:03:32,000 --> 00:03:40,000
It now enters the loop where the ANDC puts into R3 the least significant bit of R0.

29
00:03:40,000 --> 00:03:45,000
The ADD increments R1 if R3 equals 1.

30
00:03:45,000 --> 00:03:54,000
This means that if the least significant bit of R0 was a 1, then R1 is incremented by 1, otherwise R1 stays the same.

31
00:03:54,000 --> 00:03:59,000
The shift right constant then shifts R0 to the right by 1.

32
00:03:59,000 --> 00:04:10,000
This makes R0 have a 0 in the most significant bit, and the top 31 bits, of what R0 used to be, are shifted over by one position to the right.

33
00:04:10,000 --> 00:04:17,000
Note that this means that the least significant bit of the old R0 is now completely gone.

34
00:04:17,000 --> 00:04:24,000
That's okay though because we already incremented R1 based on that original least significant bit of R0.

35
00:04:24,000 --> 00:04:33,000
The BNE, or branch on not equal, then branches back to loop as long as R0 is not equal to 0.

36
00:04:33,000 --> 00:04:39,000
This means that what this loop is doing is looking at the current least significant bit of R0,

37
00:04:39,000 --> 00:04:42,000
incrementing R1 if that bit is 1,

38
00:04:42,000 --> 00:04:46,000
and then shifting that bit out until all bits have been shifted out.

39
00:04:46,000 --> 00:04:53,000
In other words, it's counting the total number of ones in the original value loaded from address x.

40
00:04:53,000 --> 00:05:03,000
The loop ends when all the 1's have been counted at which point R0 is left with a 0 in it because all the 1's have been shifted out.

41
00:05:03,000 --> 00:05:31,000
R1 is left with the number of 1's in the data 0x0FACE0FF equals in binary 0000 1111 1010 1100 1110 0000 1111 1111.

42
00:05:31,000 --> 00:05:46,000
There are 19 ones in 0x0FACE0FF, so R1 = 19 = 16 + 3 which in hexadecimal = 0x13.

43
00:05:46,000 --> 00:05:53,000
In this piece of code, the CMOVE first sets the stack pointer to 0x1000.

44
00:05:53,000 --> 00:05:58,000
Then a PUSH(SP) operation is performed.

45
00:05:58,000 --> 00:06:01,000
Lets first understand what a PUSH instruction does.

46
00:06:01,000 --> 00:06:06,000
A PUSH instruction is actually a macro made up of two beta instructions.

47
00:06:06,000 --> 00:06:16,000
To push a value onto the stack, the stack pointer is first incremented by 4 in order to point to the next empty location on the stack.

48
00:06:16,000 --> 00:06:20,000
This sets SP = 0x1004.

49
00:06:20,000 --> 00:06:34,000
Then, the contents of register Ra, which is being pushed onto the stack, are stored at the memory location whose address is SP-4 which is address 0x1000.

50
00:06:34,000 --> 00:06:46,000
Now looking at the actual PUSH operation performed here, we are performing a PUSH of stack pointer so the Ra register is also the stack pointer.

51
00:06:46,000 --> 00:06:57,000
This means that the value stored at location 0x1000 is actually the value of SP which is 0x1004.

52
00:06:57,000 --> 00:07:05,000
So the value that got pushed onto the stack is 0x1004.

