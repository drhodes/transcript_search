0
00:00:00,000 --> 00:00:04,000
Okay, here's our final contract for how procedure calls will work:

1
00:00:04,000 --> 00:00:08,000
The calling procedure ("caller") will

2
00:00:08,000 --> 00:00:11,000
PUSH the argument values onto the stack in reverse order

3
00:00:11,000 --> 00:00:16,000
Branch to the entry point of the callee, putting the return address into the linkage pointer.

4
00:00:16,000 --> 00:00:21,000
When the callee returns, remove the argument values from the stack.

5
00:00:21,000 --> 00:00:25,000
The called procedure ("callee") will

6
00:00:25,000 --> 00:00:29,000
Perform the promised computation, leaving the result in R0.

7
00:00:29,000 --> 00:00:33,000
Jump to the return address when the computation has finished

8
00:00:33,000 --> 00:00:40,000
Remove any items it has placed on the stack, leaving the stack as it was when the procedure was entered.

9
00:00:40,000 --> 00:00:46,000
Note that the arguments were PUSHed on the stack by the caller, so it will be up to the caller to remove them.

10
00:00:46,000 --> 00:00:52,000
Preserve the values in all registers except R0, which holds the return value.

11
00:00:52,000 --> 00:01:00,000
So the caller can assume any values placed in registers before a nested call will be there when the nested call returns.

12
00:01:00,000 --> 00:01:06,000
We saw the code template for procedure calls on an earlier slide.

13
00:01:06,000 --> 00:01:10,000
Here's the template for the entry point to a procedure F.

14
00:01:10,000 --> 00:01:22,000
The code saves the caller's LP and BP values, initializes BP for the current stack frame and allocates words on the stack to hold any local variable values.

15
00:01:22,000 --> 00:01:30,000
The final step is to PUSH the value of any registers (besides R0) that will be used by the remainder of the procedure's code.

16
00:01:30,000 --> 00:01:39,000
The template for the exit sequence mirrors the actions of the entry sequence, restoring all the values saved by the entry sequence,

17
00:01:39,000 --> 00:01:45,000
performing the POP operations in the reverse of the order of the PUSH operations in the entry sequence.

18
00:01:45,000 --> 00:01:56,000
Note that in moving the BP value into SP we've reset the stack to its state at the point of the MOVE(SP,BP) in the entry sequence.

19
00:01:56,000 --> 00:02:04,000
This implicitly undoes the effect of the ALLOCATE statement in the entry sequence, so we don't need a matching DEALLOCATE in the exit sequence.

20
00:02:04,000 --> 00:02:10,000
The last instruction in the exit sequence transfers control back to the calling procedure.

21
00:02:10,000 --> 00:02:15,000
With practice you'll become familiar with these code templates.

22
00:02:15,000 --> 00:02:20,000
Meanwhile, you can refer back to this slide whenever you need to generate code for a procedure call.

23
00:02:20,000 --> 00:02:26,000
Here's the code our compiler would generate for the C implementation of factorial shown on the left.

24
00:02:26,000 --> 00:02:34,000
The entry sequence saves the caller's LP and BP, then initializes BP for the current stack frame.

25
00:02:34,000 --> 00:02:39,000
The value of R1 is saved so we can use R1 in code that follows.

26
00:02:39,000 --> 00:02:44,000
The exit sequence restores all the saved values, including that for R1.

27
00:02:44,000 --> 00:02:52,000
The code for the body of the procedure has arranged for R0 to contain the return value by the time execution reaches the exit sequence.

28
00:02:52,000 --> 00:02:59,000
The nested procedure call passes the argument value on the stack and removes it after the nested call returns.

29
00:02:59,000 --> 00:03:05,000
The remainder of the code is generated using the templates we saw in the previous lecture.

30
00:03:05,000 --> 00:03:14,000
Aside from computing and pushing the values of the arguments, there are approximately 10 instructions needed to implement the linking approach to a procedure call.

31
00:03:14,000 --> 00:03:21,000
That's not much for a procedure of any size, but might be significant for a trivial procedure.

32
00:03:21,000 --> 00:03:30,000
As mentioned earlier, some optimizing compilers can make the tradeoff of inlining small non-recursive procedures saving this small amount of overhead.

33
00:03:30,000 --> 00:03:37,000
So have we solved the activation record storage issue for recursive procedures?

34
00:03:37,000 --> 00:03:42,000
Yes!  A new stack from is allocated for each procedure call.

35
00:03:42,000 --> 00:03:46,000
In each frame we see the storage for the argument and return address.

36
00:03:46,000 --> 00:03:52,000
And as the nested calls return the stack frames will be deallocated in inverse order.

37
00:03:52,000 --> 00:03:59,000
Interestingly we can learn a lot about the current state of execution by looking at the active stack frames.

38
00:03:59,000 --> 00:04:14,000
The current value of BP, along the older values saved in the activation records, allow us to identify the active procedure calls and determine their arguments, the values of any local variables for active calls, and so on.

39
00:04:14,000 --> 00:04:22,000
If we print out all this information at any given time we would have a "stack trace" showing the progress of the computation.

40
00:04:22,000 --> 00:04:31,000
In fact, when an problem occurs, many language runtimes will print out that stack trace to help the programmer determine what happened.

41
00:04:31,000 --> 00:04:40,000
And, of course, if you can interpret the information in the stack frames, you can show you understand our conventions for procedure call and return.

42
00:04:40,000 --> 00:04:44,000
Don't be surprised to find such a question on a quiz :)

